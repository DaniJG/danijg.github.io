{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-note-js","path":"/notes/open-source-kured/","result":{"data":{"mdx":{"id":"d0d8bebd-54f7-573d-8a5c-f65b25288056","excerpt":"Kured Kured  is an open source tool that allows Kubernetes administrators to control when their Nodes can reboot. This way, automaticâ€¦","frontmatter":{"title":"Allowed kured drain/reboot notifications to be customised","date":"2020-11-26T00:00:00.000Z","tags":["open-source","kured","kubernetes"],"cover":null},"fields":{"slug":"/notes/open-source-kured/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Allowed kured drain/reboot notifications to be customised\",\n  \"date\": \"2020-11-26T00:00:00.000Z\",\n  \"tags\": [\"open-source\", \"kured\", \"kubernetes\"],\n  \"link\": \"https://github.com/weaveworks/kured/pull/212\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"kured\"\n  }, \"Kured\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/weaveworks/kured\"\n  }), \"Kured\"), \" is an open source tool that allows Kubernetes administrators to control when their Nodes can reboot.\"), mdx(\"p\", null, \"This way, automatic upgrades like unattended-upgrades can be configured in the cluster nodes so the OS dependencies are automatically patched.\"), mdx(\"p\", null, \"When a reboot is necessary, unattended-upgrades will create a file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/var/run/reboot-required\"), \" instead of automatically rebooting the node. Kured runs as a daemon in your Kubernetes cluster and monitors the existing of that file. Once it detects a node needs to be rebooted, kured ensures a single node reboots at a time, and it cordongs & drains the node before rebooting.\"), mdx(\"p\", null, \"In addition, kured lets you define the day of the week and time of the day that your nodes can reboot, as well as delay a reboot based on prometheus alerts and/or pod selectors.\"), mdx(\"h2\", {\n    \"id\": \"contribution\"\n  }, \"Contribution\"), mdx(\"p\", null, \"Kured can be configured to send a slack notification when draining and rebooting a Node. However the notification message was hardcoded as in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rebooting node %s\"), \".\"), mdx(\"p\", null, \"This was limiting for myself, since I was going to use kured in many clusters across different clouds and regions. It would be great if I could send a message like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rebooting node %s, from cluster %s, region %s\")), mdx(\"p\", null, \"I \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/weaveworks/kured/pull/212\"\n  }), \"submitted a PR\"), \" that introduced 2 new options with drain/reboot message formats. I also stayed for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/weaveworks/kured/pull/228\"\n  }), \"the conversation\"), \" on refactoring the notifications using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/containrrr/shoutrrr\"\n  }), \"shouterrr\"), \" so destinations other than slack are supported.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"d0d8bebd-54f7-573d-8a5c-f65b25288056"}},"staticQueryHashes":["1961101537","2542493696"]}