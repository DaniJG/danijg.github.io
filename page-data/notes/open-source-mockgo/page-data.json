{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-note-js","path":"/notes/open-source-mockgo/","result":{"data":{"mdx":{"id":"27822084-ab2d-58e0-a91a-cbd6099af169","excerpt":"Mockgo mockgo  is a Node.js library which simplifies the task to create integration tests using a real MongoDB server. When integratingâ€¦","frontmatter":{"title":"Refactored mockgo to its v2 version using promises","date":"2018-12-05T00:00:00.000Z","tags":["open-source","node","mongo","mockgo","testing"],"cover":null},"fields":{"slug":"/notes/open-source-mockgo/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Refactored mockgo to its v2 version using promises\",\n  \"date\": \"2018-12-05T00:00:00.000Z\",\n  \"tags\": [\"open-source\", \"node\", \"mongo\", \"mockgo\", \"testing\"],\n  \"link\": \"https://github.com/seriousManual/mockgo/pull/33\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"mockgo\"\n  }, \"Mockgo\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/seriousManual/mockgo\"\n  }), \"mockgo\"), \" is a Node.js library which simplifies the task to create integration tests using a real MongoDB server.\"), mdx(\"p\", null, \"When integrating mockgo with your tests, it will take care of downloading the right mongo binaries, initialize a real in-memory mongo database and clean it at the end of the test.\"), mdx(\"h2\", {\n    \"id\": \"contribution\"\n  }, \"Contribution\"), mdx(\"p\", null, \"I was using mockgo in various Node.js projects for writing integration tests that used a real mongo database but still run fast and in memory.\"), mdx(\"p\", null, \"However some of its dependencies were outdated, which was limiting the MongoDB versions that could be used in our tests.\"), mdx(\"p\", null, \"I \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/seriousManual/mockgo/pull/33\"\n  }), \"submitted a PR\"), \" that ended up refactoring mockgo not just to update its dependencies, but also to use promises and ended up released as the v2 of the library.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"27822084-ab2d-58e0-a91a-cbd6099af169"}},"staticQueryHashes":["1961101537","2542493696"]}